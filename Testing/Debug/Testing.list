
Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001998  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001ad0  08001ad0  00002ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b6c  08001b6c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001b6c  08001b6c  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001b6c  08001b6c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b6c  08001b6c  00002b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b70  08001b70  00002b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001b74  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001b80  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001b80  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005862  00000000  00000000  00003036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c2  00000000  00000000  00008898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  00009d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d4  00000000  00000000  0000a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a11  00000000  00000000  0000ad84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000073c4  00000000  00000000  00022795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b42  00000000  00000000  00029b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd69b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a4  00000000  00000000  000bd6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000bfb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08001ab8 	.word	0x08001ab8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08001ab8 	.word	0x08001ab8

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 f8e8 	bl	8000380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f804 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f000 f854 	bl	8000260 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b8:	bf00      	nop
 80001ba:	e7fd      	b.n	80001b8 <main+0x10>

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b09a      	sub	sp, #104	@ 0x68
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0320 	add.w	r3, r7, #32
 80001c6:	2248      	movs	r2, #72	@ 0x48
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f001 fc48 	bl	8001a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0308 	add.w	r3, r7, #8
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
 80001e0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80001e2:	4b1e      	ldr	r3, [pc, #120]	@ (800025c <SystemClock_Config+0xa0>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80001ea:	4a1c      	ldr	r2, [pc, #112]	@ (800025c <SystemClock_Config+0xa0>)
 80001ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001f0:	6013      	str	r3, [r2, #0]
 80001f2:	4b1a      	ldr	r3, [pc, #104]	@ (800025c <SystemClock_Config+0xa0>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80001fe:	2320      	movs	r3, #32
 8000200:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000202:	2301      	movs	r3, #1
 8000204:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000206:	2300      	movs	r3, #0
 8000208:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800020a:	2360      	movs	r3, #96	@ 0x60
 800020c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800020e:	2300      	movs	r3, #0
 8000210:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000212:	f107 0320 	add.w	r3, r7, #32
 8000216:	4618      	mov	r0, r3
 8000218:	f000 fe16 	bl	8000e48 <HAL_RCC_OscConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000222:	f000 f844 	bl	80002ae <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000226:	234f      	movs	r3, #79	@ 0x4f
 8000228:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023e:	f107 0308 	add.w	r3, r7, #8
 8000242:	2100      	movs	r1, #0
 8000244:	4618      	mov	r0, r3
 8000246:	f001 f981 	bl	800154c <HAL_RCC_ClockConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000250:	f000 f82d 	bl	80002ae <Error_Handler>
  }
}
 8000254:	bf00      	nop
 8000256:	3768      	adds	r7, #104	@ 0x68
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	58000400 	.word	0x58000400

08000260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
 8000272:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000274:	2001      	movs	r0, #1
 8000276:	f7ff ff7f 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000284:	f000 fb34 	bl	80008f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA10 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000288:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800028c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2300      	movs	r3, #0
 8000298:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a2:	f000 f9c5 	bl	8000630 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002a6:	bf00      	nop
 80002a8:	3718      	adds	r7, #24
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002ae:	b480      	push	{r7}
 80002b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b2:	b672      	cpsid	i
}
 80002b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002b6:	bf00      	nop
 80002b8:	e7fd      	b.n	80002b6 <Error_Handler+0x8>

080002ba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr

080002c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002ca:	bf00      	nop
 80002cc:	e7fd      	b.n	80002ca <NMI_Handler+0x4>

080002ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ce:	b480      	push	{r7}
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d2:	bf00      	nop
 80002d4:	e7fd      	b.n	80002d2 <HardFault_Handler+0x4>

080002d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002da:	bf00      	nop
 80002dc:	e7fd      	b.n	80002da <MemManage_Handler+0x4>

080002de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e2:	bf00      	nop
 80002e4:	e7fd      	b.n	80002e2 <BusFault_Handler+0x4>

080002e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002ea:	bf00      	nop
 80002ec:	e7fd      	b.n	80002ea <UsageFault_Handler+0x4>

080002ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr

080002fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr

08000312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000312:	b580      	push	{r7, lr}
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000316:	f000 f88d 	bl	8000434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}

0800031e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
	...

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	@ (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000330:	f7ff fff5 	bl	800031e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	@ (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	@ (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	@ (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	@ (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	@ (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f001 fb89 	bl	8001a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff23 	bl	80001a8 <main>

08000362 <LoopForever>:

LoopForever:
    b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000370:	08001b74 	.word	0x08001b74
  ldr r2, =_sbss
 8000374:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000378:	2000002c 	.word	0x2000002c

0800037c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC_IRQHandler>
	...

08000380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000386:	2300      	movs	r3, #0
 8000388:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800038a:	2003      	movs	r0, #3
 800038c:	f000 f91e 	bl	80005cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000390:	f001 faa0 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 8000394:	4603      	mov	r3, r0
 8000396:	4a09      	ldr	r2, [pc, #36]	@ (80003bc <HAL_Init+0x3c>)
 8000398:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800039a:	200f      	movs	r0, #15
 800039c:	f000 f810 	bl	80003c0 <HAL_InitTick>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d002      	beq.n	80003ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80003a6:	2301      	movs	r3, #1
 80003a8:	71fb      	strb	r3, [r7, #7]
 80003aa:	e001      	b.n	80003b0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80003ac:	f7ff ff85 	bl	80002ba <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80003b0:	79fb      	ldrb	r3, [r7, #7]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000000 	.word	0x20000000

080003c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80003c8:	2300      	movs	r3, #0
 80003ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80003cc:	4b17      	ldr	r3, [pc, #92]	@ (800042c <HAL_InitTick+0x6c>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d024      	beq.n	800041e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80003d4:	f001 fa7e 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 80003d8:	4602      	mov	r2, r0
 80003da:	4b14      	ldr	r3, [pc, #80]	@ (800042c <HAL_InitTick+0x6c>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	4619      	mov	r1, r3
 80003e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80003e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 f912 	bl	8000616 <HAL_SYSTICK_Config>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d10f      	bne.n	8000418 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b0f      	cmp	r3, #15
 80003fc:	d809      	bhi.n	8000412 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003fe:	2200      	movs	r2, #0
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000406:	f000 f8ec 	bl	80005e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800040a:	4a09      	ldr	r2, [pc, #36]	@ (8000430 <HAL_InitTick+0x70>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6013      	str	r3, [r2, #0]
 8000410:	e007      	b.n	8000422 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000412:	2301      	movs	r3, #1
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	e004      	b.n	8000422 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000418:	2301      	movs	r3, #1
 800041a:	73fb      	strb	r3, [r7, #15]
 800041c:	e001      	b.n	8000422 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800041e:	2301      	movs	r3, #1
 8000420:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000422:	7bfb      	ldrb	r3, [r7, #15]
}
 8000424:	4618      	mov	r0, r3
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000008 	.word	0x20000008
 8000430:	20000004 	.word	0x20000004

08000434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000438:	4b05      	ldr	r3, [pc, #20]	@ (8000450 <HAL_IncTick+0x1c>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	461a      	mov	r2, r3
 800043e:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <HAL_IncTick+0x20>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4413      	add	r3, r2
 8000444:	4a03      	ldr	r2, [pc, #12]	@ (8000454 <HAL_IncTick+0x20>)
 8000446:	6013      	str	r3, [r2, #0]
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	20000008 	.word	0x20000008
 8000454:	20000028 	.word	0x20000028

08000458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  return uwTick;
 800045c:	4b02      	ldr	r3, [pc, #8]	@ (8000468 <HAL_GetTick+0x10>)
 800045e:	681b      	ldr	r3, [r3, #0]
}
 8000460:	4618      	mov	r0, r3
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	20000028 	.word	0x20000028

0800046c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f003 0307 	and.w	r3, r3, #7
 800047a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <__NVIC_SetPriorityGrouping+0x44>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000488:	4013      	ands	r3, r2
 800048a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800049c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800049e:	4a04      	ldr	r2, [pc, #16]	@ (80004b0 <__NVIC_SetPriorityGrouping+0x44>)
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	60d3      	str	r3, [r2, #12]
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004b8:	4b04      	ldr	r3, [pc, #16]	@ (80004cc <__NVIC_GetPriorityGrouping+0x18>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	0a1b      	lsrs	r3, r3, #8
 80004be:	f003 0307 	and.w	r3, r3, #7
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	e000ed00 	.word	0xe000ed00

080004d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	6039      	str	r1, [r7, #0]
 80004da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	db0a      	blt.n	80004fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	490c      	ldr	r1, [pc, #48]	@ (800051c <__NVIC_SetPriority+0x4c>)
 80004ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ee:	0112      	lsls	r2, r2, #4
 80004f0:	b2d2      	uxtb	r2, r2
 80004f2:	440b      	add	r3, r1
 80004f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004f8:	e00a      	b.n	8000510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4908      	ldr	r1, [pc, #32]	@ (8000520 <__NVIC_SetPriority+0x50>)
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	f003 030f 	and.w	r3, r3, #15
 8000506:	3b04      	subs	r3, #4
 8000508:	0112      	lsls	r2, r2, #4
 800050a:	b2d2      	uxtb	r2, r2
 800050c:	440b      	add	r3, r1
 800050e:	761a      	strb	r2, [r3, #24]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000e100 	.word	0xe000e100
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000524:	b480      	push	{r7}
 8000526:	b089      	sub	sp, #36	@ 0x24
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f003 0307 	and.w	r3, r3, #7
 8000536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	f1c3 0307 	rsb	r3, r3, #7
 800053e:	2b04      	cmp	r3, #4
 8000540:	bf28      	it	cs
 8000542:	2304      	movcs	r3, #4
 8000544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	3304      	adds	r3, #4
 800054a:	2b06      	cmp	r3, #6
 800054c:	d902      	bls.n	8000554 <NVIC_EncodePriority+0x30>
 800054e:	69fb      	ldr	r3, [r7, #28]
 8000550:	3b03      	subs	r3, #3
 8000552:	e000      	b.n	8000556 <NVIC_EncodePriority+0x32>
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000558:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	fa02 f303 	lsl.w	r3, r2, r3
 8000562:	43da      	mvns	r2, r3
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	401a      	ands	r2, r3
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800056c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	43d9      	mvns	r1, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800057c:	4313      	orrs	r3, r2
         );
}
 800057e:	4618      	mov	r0, r3
 8000580:	3724      	adds	r7, #36	@ 0x24
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3b01      	subs	r3, #1
 8000594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000598:	d301      	bcc.n	800059e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800059a:	2301      	movs	r3, #1
 800059c:	e00f      	b.n	80005be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800059e:	4a0a      	ldr	r2, [pc, #40]	@ (80005c8 <SysTick_Config+0x40>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005a6:	210f      	movs	r1, #15
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80005ac:	f7ff ff90 	bl	80004d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005b0:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <SysTick_Config+0x40>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005b6:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <SysTick_Config+0x40>)
 80005b8:	2207      	movs	r2, #7
 80005ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	e000e010 	.word	0xe000e010

080005cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff ff49 	bl	800046c <__NVIC_SetPriorityGrouping>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
 80005ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80005f0:	f7ff ff60 	bl	80004b4 <__NVIC_GetPriorityGrouping>
 80005f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	6978      	ldr	r0, [r7, #20]
 80005fc:	f7ff ff92 	bl	8000524 <NVIC_EncodePriority>
 8000600:	4602      	mov	r2, r0
 8000602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff61 	bl	80004d0 <__NVIC_SetPriority>
}
 800060e:	bf00      	nop
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ffb2 	bl	8000588 <SysTick_Config>
 8000624:	4603      	mov	r3, r0
}
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000630:	b480      	push	{r7}
 8000632:	b087      	sub	sp, #28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800063e:	e140      	b.n	80008c2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	2101      	movs	r1, #1
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	fa01 f303 	lsl.w	r3, r1, r3
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b00      	cmp	r3, #0
 8000654:	f000 8132 	beq.w	80008bc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	f003 0303 	and.w	r3, r3, #3
 8000660:	2b01      	cmp	r3, #1
 8000662:	d005      	beq.n	8000670 <HAL_GPIO_Init+0x40>
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	f003 0303 	and.w	r3, r3, #3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d130      	bne.n	80006d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	2203      	movs	r2, #3
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	4013      	ands	r3, r2
 8000686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	68da      	ldr	r2, [r3, #12]
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	693a      	ldr	r2, [r7, #16]
 8000696:	4313      	orrs	r3, r2
 8000698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006a6:	2201      	movs	r2, #1
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	43db      	mvns	r3, r3
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	4013      	ands	r3, r2
 80006b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	091b      	lsrs	r3, r3, #4
 80006bc:	f003 0201 	and.w	r2, r3, #1
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	f003 0303 	and.w	r3, r3, #3
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d017      	beq.n	800070e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	2203      	movs	r2, #3
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	43db      	mvns	r3, r3
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	4013      	ands	r3, r2
 80006f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	4313      	orrs	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	f003 0303 	and.w	r3, r3, #3
 8000716:	2b02      	cmp	r3, #2
 8000718:	d123      	bne.n	8000762 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	08da      	lsrs	r2, r3, #3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3208      	adds	r2, #8
 8000722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	220f      	movs	r2, #15
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	43db      	mvns	r3, r3
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	4013      	ands	r3, r2
 800073c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	691a      	ldr	r2, [r3, #16]
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	4313      	orrs	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	08da      	lsrs	r2, r3, #3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3208      	adds	r2, #8
 800075c:	6939      	ldr	r1, [r7, #16]
 800075e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	2203      	movs	r2, #3
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	4013      	ands	r3, r2
 8000778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f003 0203 	and.w	r2, r3, #3
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	4313      	orrs	r3, r2
 800078e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f000 808c 	beq.w	80008bc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80007a4:	4a4e      	ldr	r2, [pc, #312]	@ (80008e0 <HAL_GPIO_Init+0x2b0>)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	089b      	lsrs	r3, r3, #2
 80007aa:	3302      	adds	r3, #2
 80007ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	f003 0303 	and.w	r3, r3, #3
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	2207      	movs	r2, #7
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4013      	ands	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80007ce:	d00d      	beq.n	80007ec <HAL_GPIO_Init+0x1bc>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a44      	ldr	r2, [pc, #272]	@ (80008e4 <HAL_GPIO_Init+0x2b4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d007      	beq.n	80007e8 <HAL_GPIO_Init+0x1b8>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a43      	ldr	r2, [pc, #268]	@ (80008e8 <HAL_GPIO_Init+0x2b8>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d101      	bne.n	80007e4 <HAL_GPIO_Init+0x1b4>
 80007e0:	2302      	movs	r3, #2
 80007e2:	e004      	b.n	80007ee <HAL_GPIO_Init+0x1be>
 80007e4:	2307      	movs	r3, #7
 80007e6:	e002      	b.n	80007ee <HAL_GPIO_Init+0x1be>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e000      	b.n	80007ee <HAL_GPIO_Init+0x1be>
 80007ec:	2300      	movs	r3, #0
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	f002 0203 	and.w	r2, r2, #3
 80007f4:	0092      	lsls	r2, r2, #2
 80007f6:	4093      	lsls	r3, r2
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007fe:	4938      	ldr	r1, [pc, #224]	@ (80008e0 <HAL_GPIO_Init+0x2b0>)
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	089b      	lsrs	r3, r3, #2
 8000804:	3302      	adds	r3, #2
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800080c:	4b37      	ldr	r3, [pc, #220]	@ (80008ec <HAL_GPIO_Init+0x2bc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	43db      	mvns	r3, r3
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000824:	2b00      	cmp	r3, #0
 8000826:	d003      	beq.n	8000830 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	4313      	orrs	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000830:	4a2e      	ldr	r2, [pc, #184]	@ (80008ec <HAL_GPIO_Init+0x2bc>)
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000836:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <HAL_GPIO_Init+0x2bc>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	43db      	mvns	r3, r3
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	4013      	ands	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d003      	beq.n	800085a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4313      	orrs	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800085a:	4a24      	ldr	r2, [pc, #144]	@ (80008ec <HAL_GPIO_Init+0x2bc>)
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <HAL_GPIO_Init+0x2bc>)
 8000862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000866:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	43db      	mvns	r3, r3
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4013      	ands	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4313      	orrs	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000886:	4a19      	ldr	r2, [pc, #100]	@ (80008ec <HAL_GPIO_Init+0x2bc>)
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <HAL_GPIO_Init+0x2bc>)
 8000890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000894:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	43db      	mvns	r3, r3
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	4013      	ands	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d003      	beq.n	80008b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80008b4:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <HAL_GPIO_Init+0x2bc>)
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	3301      	adds	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	fa22 f303 	lsr.w	r3, r2, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f47f aeb7 	bne.w	8000640 <HAL_GPIO_Init+0x10>
  }
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	371c      	adds	r7, #28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40010000 	.word	0x40010000
 80008e4:	48000400 	.word	0x48000400
 80008e8:	48000800 	.word	0x48000800
 80008ec:	58000800 	.word	0x58000800

080008f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	807b      	strh	r3, [r7, #2]
 80008fc:	4613      	mov	r3, r2
 80008fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000900:	787b      	ldrb	r3, [r7, #1]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d003      	beq.n	800090e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000906:	887a      	ldrh	r2, [r7, #2]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800090c:	e002      	b.n	8000914 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800090e:	887a      	ldrh	r2, [r7, #2]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
	...

08000920 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a03      	ldr	r2, [pc, #12]	@ (8000938 <HAL_PWR_EnableBkUpAccess+0x18>)
 800092a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	58000400 	.word	0x58000400

0800093c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000940:	4b03      	ldr	r3, [pc, #12]	@ (8000950 <HAL_PWREx_GetVoltageRange+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	58000400 	.word	0x58000400

08000954 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000964:	d101      	bne.n	800096a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	58000400 	.word	0x58000400

08000978 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800097c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000986:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80009b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80009c2:	d101      	bne.n	80009c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80009c4:	2301      	movs	r3, #1
 80009c6:	e000      	b.n	80009ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80009d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009e4:	6013      	str	r3, [r2, #0]
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80009f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a00:	6013      	str	r3, [r2, #0]
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000a1c:	d101      	bne.n	8000a22 <LL_RCC_HSE_IsReady+0x18>
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e000      	b.n	8000a24 <LL_RCC_HSE_IsReady+0x1a>
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a76:	d101      	bne.n	8000a7c <LL_RCC_HSI_IsReady+0x18>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e000      	b.n	8000a7e <LL_RCC_HSI_IsReady+0x1a>
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	061b      	lsls	r3, r3, #24
 8000a9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	604b      	str	r3, [r1, #4]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d101      	bne.n	8000ac6 <LL_RCC_LSE_IsReady+0x18>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e000      	b.n	8000ac8 <LL_RCC_LSE_IsReady+0x1a>
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000adc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000afc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b00:	f023 0301 	bic.w	r3, r3, #1
 8000b04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d101      	bne.n	8000b28 <LL_RCC_LSI_IsReady+0x18>
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <LL_RCC_LSI_IsReady+0x1a>
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6013      	str	r3, [r2, #0]
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b5c:	f023 0301 	bic.w	r3, r3, #1
 8000b60:	6013      	str	r3, [r2, #0]
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d101      	bne.n	8000b80 <LL_RCC_MSI_IsReady+0x16>
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e000      	b.n	8000b82 <LL_RCC_MSI_IsReady+0x18>
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d101      	bne.n	8000ba0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr

08000baa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bcc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	604b      	str	r3, [r1, #4]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f023 0203 	bic.w	r2, r3, #3
 8000c12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	608b      	str	r3, [r1, #8]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 030c 	and.w	r3, r3, #12
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	608b      	str	r3, [r1, #8]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000c72:	f023 020f 	bic.w	r2, r3, #15
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000ca0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	608b      	str	r3, [r1, #8]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000cc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	608b      	str	r3, [r1, #8]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr

08000cda <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cf8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d1c:	6013      	str	r3, [r2, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000d38:	6013      	str	r3, [r2, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000d54:	d101      	bne.n	8000d5a <LL_RCC_PLL_IsReady+0x18>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <LL_RCC_PLL_IsReady+0x1a>
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	f003 0303 	and.w	r3, r3, #3
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dd0:	d101      	bne.n	8000dd6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000de8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000df4:	d101      	bne.n	8000dfa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000e16:	d101      	bne.n	8000e1c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8000e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8000e38:	d101      	bne.n	8000e3e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e36f      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e5a:	f7ff fee4 	bl	8000c26 <LL_RCC_GetSysClkSource>
 8000e5e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e60:	f7ff ffa2 	bl	8000da8 <LL_RCC_PLL_GetMainSource>
 8000e64:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0320 	and.w	r3, r3, #32
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 80c4 	beq.w	8000ffc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d005      	beq.n	8000e86 <HAL_RCC_OscConfig+0x3e>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	2b0c      	cmp	r3, #12
 8000e7e:	d176      	bne.n	8000f6e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d173      	bne.n	8000f6e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e353      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d005      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x68>
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000eae:	e006      	b.n	8000ebe <HAL_RCC_OscConfig+0x76>
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d222      	bcs.n	8000f08 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fd18 	bl	80018fc <RCC_SetFlashLatencyFromMSIRange>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e331      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fe69 	bl	8000bd8 <LL_RCC_MSI_SetCalibTrimming>
 8000f06:	e021      	b.n	8000f4c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fe50 	bl	8000bd8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fcdd 	bl	80018fc <RCC_SetFlashLatencyFromMSIRange>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e2f6      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000f4c:	f000 fcc2 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4aa7      	ldr	r2, [pc, #668]	@ (80011f0 <HAL_RCC_OscConfig+0x3a8>)
 8000f54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8000f56:	4ba7      	ldr	r3, [pc, #668]	@ (80011f4 <HAL_RCC_OscConfig+0x3ac>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa30 	bl	80003c0 <HAL_InitTick>
 8000f60:	4603      	mov	r3, r0
 8000f62:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8000f64:	7cfb      	ldrb	r3, [r7, #19]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d047      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8000f6a:	7cfb      	ldrb	r3, [r7, #19]
 8000f6c:	e2e5      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d02c      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f76:	f7ff fddc 	bl	8000b32 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fa6d 	bl	8000458 <HAL_GetTick>
 8000f7e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f82:	f7ff fa69 	bl	8000458 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e2d2      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8000f94:	f7ff fde9 	bl	8000b6a <LL_RCC_MSI_IsReady>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f1      	beq.n	8000f82 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fe05 	bl	8000bd8 <LL_RCC_MSI_SetCalibTrimming>
 8000fce:	e015      	b.n	8000ffc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fd0:	f7ff fdbd 	bl	8000b4e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fa40 	bl	8000458 <HAL_GetTick>
 8000fd8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fa3c 	bl	8000458 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e2a5      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8000fee:	f7ff fdbc 	bl	8000b6a <LL_RCC_MSI_IsReady>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f1      	bne.n	8000fdc <HAL_RCC_OscConfig+0x194>
 8000ff8:	e000      	b.n	8000ffc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000ffa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d058      	beq.n	80010ba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	2b08      	cmp	r3, #8
 800100c:	d005      	beq.n	800101a <HAL_RCC_OscConfig+0x1d2>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	2b0c      	cmp	r3, #12
 8001012:	d108      	bne.n	8001026 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d105      	bne.n	8001026 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d14b      	bne.n	80010ba <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e289      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001038:	4313      	orrs	r3, r2
 800103a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001044:	d102      	bne.n	800104c <HAL_RCC_OscConfig+0x204>
 8001046:	f7ff fcc4 	bl	80009d2 <LL_RCC_HSE_Enable>
 800104a:	e00d      	b.n	8001068 <HAL_RCC_OscConfig+0x220>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001054:	d104      	bne.n	8001060 <HAL_RCC_OscConfig+0x218>
 8001056:	f7ff fc8f 	bl	8000978 <LL_RCC_HSE_EnableTcxo>
 800105a:	f7ff fcba 	bl	80009d2 <LL_RCC_HSE_Enable>
 800105e:	e003      	b.n	8001068 <HAL_RCC_OscConfig+0x220>
 8001060:	f7ff fcc5 	bl	80009ee <LL_RCC_HSE_Disable>
 8001064:	f7ff fc96 	bl	8000994 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d012      	beq.n	8001096 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff f9f2 	bl	8000458 <HAL_GetTick>
 8001074:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff f9ee 	bl	8000458 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	@ 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e257      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800108a:	f7ff fcbe 	bl	8000a0a <LL_RCC_HSE_IsReady>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f1      	beq.n	8001078 <HAL_RCC_OscConfig+0x230>
 8001094:	e011      	b.n	80010ba <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff f9df 	bl	8000458 <HAL_GetTick>
 800109a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800109e:	f7ff f9db 	bl	8000458 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b64      	cmp	r3, #100	@ 0x64
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e244      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80010b0:	f7ff fcab 	bl	8000a0a <LL_RCC_HSE_IsReady>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f1      	bne.n	800109e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d046      	beq.n	8001154 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_OscConfig+0x290>
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	2b0c      	cmp	r3, #12
 80010d0:	d10e      	bne.n	80010f0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d10b      	bne.n	80010f0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e22a      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fccc 	bl	8000a86 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80010ee:	e031      	b.n	8001154 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d019      	beq.n	800112c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f8:	f7ff fc98 	bl	8000a2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff f9ac 	bl	8000458 <HAL_GetTick>
 8001100:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff f9a8 	bl	8000458 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e211      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001116:	f7ff fca5 	bl	8000a64 <LL_RCC_HSI_IsReady>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f1      	beq.n	8001104 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fcae 	bl	8000a86 <LL_RCC_HSI_SetCalibTrimming>
 800112a:	e013      	b.n	8001154 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112c:	f7ff fc8c 	bl	8000a48 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001130:	f7ff f992 	bl	8000458 <HAL_GetTick>
 8001134:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001138:	f7ff f98e 	bl	8000458 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e1f7      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800114a:	f7ff fc8b 	bl	8000a64 <LL_RCC_HSI_IsReady>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f1      	bne.n	8001138 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	2b00      	cmp	r3, #0
 800115e:	d06e      	beq.n	800123e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d056      	beq.n	8001216 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800116c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001170:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	429a      	cmp	r2, r3
 800117e:	d031      	beq.n	80011e4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d006      	beq.n	8001198 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e1d0      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d013      	beq.n	80011ca <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80011a2:	f7ff fca5 	bl	8000af0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80011a6:	f7ff f957 	bl	8000458 <HAL_GetTick>
 80011aa:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ae:	f7ff f953 	bl	8000458 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b11      	cmp	r3, #17
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e1bc      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80011c0:	f7ff fca6 	bl	8000b10 <LL_RCC_LSI_IsReady>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f1      	bne.n	80011ae <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011d2:	f023 0210 	bic.w	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011de:	4313      	orrs	r3, r2
 80011e0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e4:	f7ff fc74 	bl	8000ad0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e8:	f7ff f936 	bl	8000458 <HAL_GetTick>
 80011ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80011ee:	e00c      	b.n	800120a <HAL_RCC_OscConfig+0x3c2>
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff f92e 	bl	8000458 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b11      	cmp	r3, #17
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e197      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800120a:	f7ff fc81 	bl	8000b10 <LL_RCC_LSI_IsReady>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f1      	beq.n	80011f8 <HAL_RCC_OscConfig+0x3b0>
 8001214:	e013      	b.n	800123e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001216:	f7ff fc6b 	bl	8000af0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff f91d 	bl	8000458 <HAL_GetTick>
 800121e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff f919 	bl	8000458 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b11      	cmp	r3, #17
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e182      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001234:	f7ff fc6c 	bl	8000b10 <LL_RCC_LSI_IsReady>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f1      	bne.n	8001222 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80d8 	beq.w	80013fc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800124c:	f7ff fb82 	bl	8000954 <LL_PWR_IsEnabledBkUpAccess>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d113      	bne.n	800127e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001256:	f7ff fb63 	bl	8000920 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800125a:	f7ff f8fd 	bl	8000458 <HAL_GetTick>
 800125e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001262:	f7ff f8f9 	bl	8000458 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e162      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001274:	f7ff fb6e 	bl	8000954 <LL_PWR_IsEnabledBkUpAccess>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f1      	beq.n	8001262 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d07b      	beq.n	800137e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b85      	cmp	r3, #133	@ 0x85
 800128c:	d003      	beq.n	8001296 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b05      	cmp	r3, #5
 8001294:	d109      	bne.n	80012aa <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800129a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800129e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff f8d5 	bl	8000458 <HAL_GetTick>
 80012ae:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c6:	f7ff f8c7 	bl	8000458 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e12e      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80012dc:	f7ff fbe7 	bl	8000aae <LL_RCC_LSE_IsReady>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0ef      	beq.n	80012c6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b81      	cmp	r3, #129	@ 0x81
 80012ec:	d003      	beq.n	80012f6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2b85      	cmp	r3, #133	@ 0x85
 80012f4:	d121      	bne.n	800133a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff f8af 	bl	8000458 <HAL_GetTick>
 80012fa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80012fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800130c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001310:	e00a      	b.n	8001328 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f7ff f8a1 	bl	8000458 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001320:	4293      	cmp	r3, r2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e108      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ec      	beq.n	8001312 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001338:	e060      	b.n	80013fc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff f88d 	bl	8000458 <HAL_GetTick>
 800133e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001348:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800134c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001356:	f7ff f87f 	bl	8000458 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001364:	4293      	cmp	r3, r2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0e6      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1ec      	bne.n	8001356 <HAL_RCC_OscConfig+0x50e>
 800137c:	e03e      	b.n	80013fc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff f86b 	bl	8000458 <HAL_GetTick>
 8001382:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800138c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001390:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff f85d 	bl	8000458 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0c4      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1ec      	bne.n	800139a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff f84a 	bl	8000458 <HAL_GetTick>
 80013c4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80013c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013dc:	f7ff f83c 	bl	8000458 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0a3      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80013f2:	f7ff fb5c 	bl	8000aae <LL_RCC_LSE_IsReady>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1ef      	bne.n	80013dc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 8099 	beq.w	8001538 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	2b0c      	cmp	r3, #12
 800140a:	d06c      	beq.n	80014e6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001410:	2b02      	cmp	r3, #2
 8001412:	d14b      	bne.n	80014ac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001414:	f7ff fc87 	bl	8000d26 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff f81e 	bl	8000458 <HAL_GetTick>
 800141c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff f81a 	bl	8000458 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b0a      	cmp	r3, #10
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e083      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001432:	f7ff fc86 	bl	8000d42 <LL_RCC_PLL_IsReady>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f1      	bne.n	8001420 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	4b40      	ldr	r3, [pc, #256]	@ (8001544 <HAL_RCC_OscConfig+0x6fc>)
 8001444:	4013      	ands	r3, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800144e:	4311      	orrs	r1, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001454:	0212      	lsls	r2, r2, #8
 8001456:	4311      	orrs	r1, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800145c:	4311      	orrs	r1, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001462:	4311      	orrs	r1, r2
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001468:	430a      	orrs	r2, r1
 800146a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800146e:	4313      	orrs	r3, r2
 8001470:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001472:	f7ff fc4a 	bl	8000d0a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001484:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7fe ffe7 	bl	8000458 <HAL_GetTick>
 800148a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148e:	f7fe ffe3 	bl	8000458 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b0a      	cmp	r3, #10
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e04c      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80014a0:	f7ff fc4f 	bl	8000d42 <LL_RCC_PLL_IsReady>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f1      	beq.n	800148e <HAL_RCC_OscConfig+0x646>
 80014aa:	e045      	b.n	8001538 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ac:	f7ff fc3b 	bl	8000d26 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7fe ffd2 	bl	8000458 <HAL_GetTick>
 80014b4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7fe ffce 	bl	8000458 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b0a      	cmp	r3, #10
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e037      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80014ca:	f7ff fc3a 	bl	8000d42 <LL_RCC_PLL_IsReady>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f1      	bne.n	80014b8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_RCC_OscConfig+0x700>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	60cb      	str	r3, [r1, #12]
 80014e4:	e028      	b.n	8001538 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e023      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	f003 0203 	and.w	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001504:	429a      	cmp	r2, r3
 8001506:	d115      	bne.n	8001534 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001512:	429a      	cmp	r2, r3
 8001514:	d10e      	bne.n	8001534 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	429a      	cmp	r2, r3
 8001524:	d106      	bne.n	8001534 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	11c1808c 	.word	0x11c1808c
 8001548:	eefefffc 	.word	0xeefefffc

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e10f      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b89      	ldr	r3, [pc, #548]	@ (8001788 <HAL_RCC_ClockConfig+0x23c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d91b      	bls.n	80015a6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b86      	ldr	r3, [pc, #536]	@ (8001788 <HAL_RCC_ClockConfig+0x23c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0207 	bic.w	r2, r3, #7
 8001576:	4984      	ldr	r1, [pc, #528]	@ (8001788 <HAL_RCC_ClockConfig+0x23c>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800157e:	f7fe ff6b 	bl	8000458 <HAL_GetTick>
 8001582:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001584:	e008      	b.n	8001598 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001586:	f7fe ff67 	bl	8000458 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e0f3      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001598:	4b7b      	ldr	r3, [pc, #492]	@ (8001788 <HAL_RCC_ClockConfig+0x23c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d1ef      	bne.n	8001586 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d016      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fb40 	bl	8000c3c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80015bc:	f7fe ff4c 	bl	8000458 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80015c4:	f7fe ff48 	bl	8000458 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0d4      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80015d6:	f7ff fbf2 	bl	8000dbe <LL_RCC_IsActiveFlag_HPRE>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f1      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d016      	beq.n	800161a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fb36 	bl	8000c62 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80015f6:	f7fe ff2f 	bl	8000458 <HAL_GetTick>
 80015fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80015fe:	f7fe ff2b 	bl	8000458 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0b7      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001610:	f7ff fbe6 	bl	8000de0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f1      	beq.n	80015fe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	d016      	beq.n	8001654 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fb2f 	bl	8000c8e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001630:	f7fe ff12 	bl	8000458 <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001638:	f7fe ff0e 	bl	8000458 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e09a      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800164a:	f7ff fbdb 	bl	8000e04 <LL_RCC_IsActiveFlag_PPRE1>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f1      	beq.n	8001638 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d017      	beq.n	8001690 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fb24 	bl	8000cb4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800166c:	f7fe fef4 	bl	8000458 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001674:	f7fe fef0 	bl	8000458 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e07c      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001686:	f7ff fbce 	bl	8000e26 <LL_RCC_IsActiveFlag_PPRE2>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f1      	beq.n	8001674 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d043      	beq.n	8001724 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80016a4:	f7ff f9b1 	bl	8000a0a <LL_RCC_HSE_IsReady>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d11e      	bne.n	80016ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e066      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d106      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80016ba:	f7ff fb42 	bl	8000d42 <LL_RCC_PLL_IsReady>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d113      	bne.n	80016ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e05b      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80016d0:	f7ff fa4b 	bl	8000b6a <LL_RCC_MSI_IsReady>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d108      	bne.n	80016ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e050      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80016de:	f7ff f9c1 	bl	8000a64 <LL_RCC_HSI_IsReady>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e049      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fa85 	bl	8000c00 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f6:	f7fe feaf 	bl	8000458 <HAL_GetTick>
 80016fa:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fe:	f7fe feab 	bl	8000458 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e035      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001714:	f7ff fa87 	bl	8000c26 <LL_RCC_GetSysClkSource>
 8001718:	4602      	mov	r2, r0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d1ec      	bne.n	80016fe <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001724:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <HAL_RCC_ClockConfig+0x23c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d21b      	bcs.n	800176a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_RCC_ClockConfig+0x23c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 0207 	bic.w	r2, r3, #7
 800173a:	4913      	ldr	r1, [pc, #76]	@ (8001788 <HAL_RCC_ClockConfig+0x23c>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001742:	f7fe fe89 	bl	8000458 <HAL_GetTick>
 8001746:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001748:	e008      	b.n	800175c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800174a:	f7fe fe85 	bl	8000458 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e011      	b.n	8001780 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175c:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_RCC_ClockConfig+0x23c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d1ef      	bne.n	800174a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800176a:	f000 f8b3 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 800176e:	4603      	mov	r3, r0
 8001770:	4a06      	ldr	r2, [pc, #24]	@ (800178c <HAL_RCC_ClockConfig+0x240>)
 8001772:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_RCC_ClockConfig+0x244>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe21 	bl	80003c0 <HAL_InitTick>
 800177e:	4603      	mov	r3, r0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	58004000 	.word	0x58004000
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a2:	f7ff fa40 	bl	8000c26 <LL_RCC_GetSysClkSource>
 80017a6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a8:	f7ff fafe 	bl	8000da8 <LL_RCC_PLL_GetMainSource>
 80017ac:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x2c>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d139      	bne.n	800182e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d136      	bne.n	800182e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80017c0:	f7ff f9e3 	bl	8000b8a <LL_RCC_MSI_IsEnabledRangeSelect>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d115      	bne.n	80017f6 <HAL_RCC_GetSysClockFreq+0x62>
 80017ca:	f7ff f9de 	bl	8000b8a <LL_RCC_MSI_IsEnabledRangeSelect>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_GetSysClockFreq+0x4e>
 80017d4:	f7ff f9e9 	bl	8000baa <LL_RCC_MSI_GetRange>
 80017d8:	4603      	mov	r3, r0
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	e005      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x5a>
 80017e2:	f7ff f9ed 	bl	8000bc0 <LL_RCC_MSI_GetRangeAfterStandby>
 80017e6:	4603      	mov	r3, r0
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	4a36      	ldr	r2, [pc, #216]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x134>)
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	e014      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x8c>
 80017f6:	f7ff f9c8 	bl	8000b8a <LL_RCC_MSI_IsEnabledRangeSelect>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_RCC_GetSysClockFreq+0x7a>
 8001800:	f7ff f9d3 	bl	8000baa <LL_RCC_MSI_GetRange>
 8001804:	4603      	mov	r3, r0
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	e005      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x86>
 800180e:	f7ff f9d7 	bl	8000bc0 <LL_RCC_MSI_GetRangeAfterStandby>
 8001812:	4603      	mov	r3, r0
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	4a2b      	ldr	r2, [pc, #172]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x134>)
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d115      	bne.n	8001854 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800182c:	e012      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b04      	cmp	r3, #4
 8001832:	d102      	bne.n	800183a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001834:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x138>)
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e00c      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b08      	cmp	r3, #8
 800183e:	d109      	bne.n	8001854 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001840:	f7ff f8b6 	bl	80009b0 <LL_RCC_HSE_IsEnabledDiv2>
 8001844:	4603      	mov	r3, r0
 8001846:	2b01      	cmp	r3, #1
 8001848:	d102      	bne.n	8001850 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x138>)
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	e001      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001850:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001852:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001854:	f7ff f9e7 	bl	8000c26 <LL_RCC_GetSysClkSource>
 8001858:	4603      	mov	r3, r0
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d12f      	bne.n	80018be <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800185e:	f7ff faa3 	bl	8000da8 <LL_RCC_PLL_GetMainSource>
 8001862:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0xde>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d003      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0xe4>
 8001870:	e00d      	b.n	800188e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001872:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x138>)
 8001874:	60fb      	str	r3, [r7, #12]
        break;
 8001876:	e00d      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001878:	f7ff f89a 	bl	80009b0 <LL_RCC_HSE_IsEnabledDiv2>
 800187c:	4603      	mov	r3, r0
 800187e:	2b01      	cmp	r3, #1
 8001880:	d102      	bne.n	8001888 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x138>)
 8001884:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001886:	e005      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800188a:	60fb      	str	r3, [r7, #12]
        break;
 800188c:	e002      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	60fb      	str	r3, [r7, #12]
        break;
 8001892:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001894:	f7ff fa66 	bl	8000d64 <LL_RCC_PLL_GetN>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	fb03 f402 	mul.w	r4, r3, r2
 80018a0:	f7ff fa77 	bl	8000d92 <LL_RCC_PLL_GetDivider>
 80018a4:	4603      	mov	r3, r0
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	3301      	adds	r3, #1
 80018aa:	fbb4 f4f3 	udiv	r4, r4, r3
 80018ae:	f7ff fa65 	bl	8000d7c <LL_RCC_PLL_GetR>
 80018b2:	4603      	mov	r3, r0
 80018b4:	0f5b      	lsrs	r3, r3, #29
 80018b6:	3301      	adds	r3, #1
 80018b8:	fbb4 f3f3 	udiv	r3, r4, r3
 80018bc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80018be:	697b      	ldr	r3, [r7, #20]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	08001b2c 	.word	0x08001b2c
 80018cc:	00f42400 	.word	0x00f42400
 80018d0:	01e84800 	.word	0x01e84800

080018d4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d4:	b598      	push	{r3, r4, r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80018d8:	f7ff ff5c 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 80018dc:	4604      	mov	r4, r0
 80018de:	f7ff f9fc 	bl	8000cda <LL_RCC_GetAHBPrescaler>
 80018e2:	4603      	mov	r3, r0
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	4a03      	ldr	r2, [pc, #12]	@ (80018f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80018ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd98      	pop	{r3, r4, r7, pc}
 80018f8:	08001aec 	.word	0x08001aec

080018fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	4a10      	ldr	r2, [pc, #64]	@ (8001950 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001914:	f7ff f9ec 	bl	8000cf0 <LL_RCC_GetAHB3Prescaler>
 8001918:	4603      	mov	r3, r0
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	4a0c      	ldr	r2, [pc, #48]	@ (8001954 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4a09      	ldr	r2, [pc, #36]	@ (8001958 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9c      	lsrs	r4, r3, #18
 8001938:	f7ff f800 	bl	800093c <HAL_PWREx_GetVoltageRange>
 800193c:	4603      	mov	r3, r0
 800193e:	4619      	mov	r1, r3
 8001940:	4620      	mov	r0, r4
 8001942:	f000 f80b 	bl	800195c <RCC_SetFlashLatency>
 8001946:	4603      	mov	r3, r0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	08001b2c 	.word	0x08001b2c
 8001954:	08001aec 	.word	0x08001aec
 8001958:	431bde83 	.word	0x431bde83

0800195c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08e      	sub	sp, #56	@ 0x38
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001966:	4a3a      	ldr	r2, [pc, #232]	@ (8001a50 <RCC_SetFlashLatency+0xf4>)
 8001968:	f107 0320 	add.w	r3, r7, #32
 800196c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001970:	6018      	str	r0, [r3, #0]
 8001972:	3304      	adds	r3, #4
 8001974:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001976:	4a37      	ldr	r2, [pc, #220]	@ (8001a54 <RCC_SetFlashLatency+0xf8>)
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001980:	6018      	str	r0, [r3, #0]
 8001982:	3304      	adds	r3, #4
 8001984:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001986:	4a34      	ldr	r2, [pc, #208]	@ (8001a58 <RCC_SetFlashLatency+0xfc>)
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	ca07      	ldmia	r2, {r0, r1, r2}
 800198e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001992:	2300      	movs	r3, #0
 8001994:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800199c:	d11b      	bne.n	80019d6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800199e:	2300      	movs	r3, #0
 80019a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019a2:	e014      	b.n	80019ce <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80019a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	3338      	adds	r3, #56	@ 0x38
 80019aa:	443b      	add	r3, r7
 80019ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80019b0:	461a      	mov	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d807      	bhi.n	80019c8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80019b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	3338      	adds	r3, #56	@ 0x38
 80019be:	443b      	add	r3, r7
 80019c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80019c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80019c6:	e021      	b.n	8001a0c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80019c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ca:	3301      	adds	r3, #1
 80019cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d9e7      	bls.n	80019a4 <RCC_SetFlashLatency+0x48>
 80019d4:	e01a      	b.n	8001a0c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019da:	e014      	b.n	8001a06 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80019dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	3338      	adds	r3, #56	@ 0x38
 80019e2:	443b      	add	r3, r7
 80019e4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80019e8:	461a      	mov	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d807      	bhi.n	8001a00 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80019f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	3338      	adds	r3, #56	@ 0x38
 80019f6:	443b      	add	r3, r7
 80019f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80019fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80019fe:	e005      	b.n	8001a0c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a02:	3301      	adds	r3, #1
 8001a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d9e7      	bls.n	80019dc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <RCC_SetFlashLatency+0x100>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 0207 	bic.w	r2, r3, #7
 8001a14:	4911      	ldr	r1, [pc, #68]	@ (8001a5c <RCC_SetFlashLatency+0x100>)
 8001a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001a1c:	f7fe fd1c 	bl	8000458 <HAL_GetTick>
 8001a20:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001a22:	e008      	b.n	8001a36 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001a24:	f7fe fd18 	bl	8000458 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e007      	b.n	8001a46 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <RCC_SetFlashLatency+0x100>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1ef      	bne.n	8001a24 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3738      	adds	r7, #56	@ 0x38
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	08001ad0 	.word	0x08001ad0
 8001a54:	08001ad8 	.word	0x08001ad8
 8001a58:	08001ae0 	.word	0x08001ae0
 8001a5c:	58004000 	.word	0x58004000

08001a60 <memset>:
 8001a60:	4402      	add	r2, r0
 8001a62:	4603      	mov	r3, r0
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d100      	bne.n	8001a6a <memset+0xa>
 8001a68:	4770      	bx	lr
 8001a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8001a6e:	e7f9      	b.n	8001a64 <memset+0x4>

08001a70 <__libc_init_array>:
 8001a70:	b570      	push	{r4, r5, r6, lr}
 8001a72:	4d0d      	ldr	r5, [pc, #52]	@ (8001aa8 <__libc_init_array+0x38>)
 8001a74:	4c0d      	ldr	r4, [pc, #52]	@ (8001aac <__libc_init_array+0x3c>)
 8001a76:	1b64      	subs	r4, r4, r5
 8001a78:	10a4      	asrs	r4, r4, #2
 8001a7a:	2600      	movs	r6, #0
 8001a7c:	42a6      	cmp	r6, r4
 8001a7e:	d109      	bne.n	8001a94 <__libc_init_array+0x24>
 8001a80:	4d0b      	ldr	r5, [pc, #44]	@ (8001ab0 <__libc_init_array+0x40>)
 8001a82:	4c0c      	ldr	r4, [pc, #48]	@ (8001ab4 <__libc_init_array+0x44>)
 8001a84:	f000 f818 	bl	8001ab8 <_init>
 8001a88:	1b64      	subs	r4, r4, r5
 8001a8a:	10a4      	asrs	r4, r4, #2
 8001a8c:	2600      	movs	r6, #0
 8001a8e:	42a6      	cmp	r6, r4
 8001a90:	d105      	bne.n	8001a9e <__libc_init_array+0x2e>
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
 8001a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a98:	4798      	blx	r3
 8001a9a:	3601      	adds	r6, #1
 8001a9c:	e7ee      	b.n	8001a7c <__libc_init_array+0xc>
 8001a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aa2:	4798      	blx	r3
 8001aa4:	3601      	adds	r6, #1
 8001aa6:	e7f2      	b.n	8001a8e <__libc_init_array+0x1e>
 8001aa8:	08001b6c 	.word	0x08001b6c
 8001aac:	08001b6c 	.word	0x08001b6c
 8001ab0:	08001b6c 	.word	0x08001b6c
 8001ab4:	08001b70 	.word	0x08001b70

08001ab8 <_init>:
 8001ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aba:	bf00      	nop
 8001abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001abe:	bc08      	pop	{r3}
 8001ac0:	469e      	mov	lr, r3
 8001ac2:	4770      	bx	lr

08001ac4 <_fini>:
 8001ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac6:	bf00      	nop
 8001ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aca:	bc08      	pop	{r3}
 8001acc:	469e      	mov	lr, r3
 8001ace:	4770      	bx	lr
